// Generated by Dagger (https://dagger.dev).
package jatx.foreignreader.di;

import android.content.Context;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import jatx.filereader.FileReaderImpl_Factory;
import jatx.foreignreader.prefs.PrefsImpl;
import jatx.foreignreader.prefs.PrefsImpl_Factory;
import jatx.foreignreader.presentation.MainPresenter;
import jatx.foreignreader.ui.MainActivity;
import jatx.foreignreader.ui.MainActivity_MembersInjector;
import jatx.yandexdictionaryclient.YandexDictionaryClientImpl_Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AdaptersModule adaptersModule;

  private final Context context;

  private Provider<Context> contextProvider;

  private Provider<PrefsImpl> prefsImplProvider;

  private Provider<MainPresenter> provideMainPresenterProvider;

  private DaggerAppComponent(AdaptersModule adaptersModuleParam,
      PresenterModule presenterModuleParam, Context contextParam) {
    this.adaptersModule = adaptersModuleParam;
    this.context = contextParam;
    initialize(adaptersModuleParam, presenterModuleParam, contextParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AdaptersModule adaptersModuleParam,
      final PresenterModule presenterModuleParam, final Context contextParam) {
    this.contextProvider = InstanceFactory.create(contextParam);
    this.prefsImplProvider = PrefsImpl_Factory.create(contextProvider);
    this.provideMainPresenterProvider = PresenterModule_ProvideMainPresenterFactory.create(presenterModuleParam, contextProvider, (Provider) YandexDictionaryClientImpl_Factory.create(), (Provider) FileReaderImpl_Factory.create(), (Provider) prefsImplProvider);
  }

  @Override
  public void inject(MainActivity arg0) {
    injectMainActivity(arg0);}

  @Override
  public Context context() {
    return context;}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectRvParagraphsAdapter(instance, AdaptersModule_ProvideParagraphsAdapterFactory.provideParagraphsAdapter(adaptersModule));
    MainActivity_MembersInjector.injectRvContentsAdapter(instance, AdaptersModule_ProvideContentsAdapterFactory.provideContentsAdapter(adaptersModule));
    MainActivity_MembersInjector.injectPresenterProvider(instance, DoubleCheck.lazy(provideMainPresenterProvider));
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Context context;

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(context, Context.class);
      return new DaggerAppComponent(new AdaptersModule(), new PresenterModule(), context);
    }
  }
}
